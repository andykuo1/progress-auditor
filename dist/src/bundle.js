"use strict";const path=require("path"),fs=require("fs"),DEFAULT_CONFIG_FILE_NAME="config.json";async function loadConfig(o){let t,n;try{o=findValidConfigFilePath(o),n=path.dirname(o)}catch(o){return Promise.reject(o)}try{const n=fs.readFileSync(o);t=JSON.parse(n)}catch(o){return Promise.reject(["Failed to parse config file:","=>",o,"<="])}if("include"in(t=resolveConfigPaths(n,t))){const o=[],n=[];for(const e of t.include)try{const t=await loadConfig(e);n.push(t)}catch(t){o.push(t)}if(o.length>0)return Promise.reject(["Failed to resolve config includes:","=>",o,"<="]);const e=n.reduce((o,t)=>mergeConfigs(t,o),{});t=mergeConfigs(t,e)}return t}function findValidConfigFilePath(o){if(!fs.existsSync(o))throw new Error(`Cannot find non-existant path '${o}'.`);if(fs.lstatSync(o).isDirectory()){const t=o;if(o=path.resolve(t,DEFAULT_CONFIG_FILE_NAME),!fs.existsSync(o))throw new Error(`Cannot find config file in directory '${t}'.`)}return o}function resolveConfigEntry(o,t,n){if(t.toLowerCase().endsWith("path"))return resolveConfigPathEntry(o,n);if(Array.isArray(n)){let t=[];for(const e in n)t.push(resolveConfigEntry(o,e,n[e]));return t}if("object"==typeof n){let t={};for(const[e,r]of Object.entries(n))t[e]=resolveConfigEntry(o,e,r);return t}return n}function resolveConfigPathEntry(o,t){if(Array.isArray(t)){let n=[];for(const e of t)n.push(resolveConfigPathEntry(o,e));return n}return"object"==typeof t?resolveConfigPaths(o,t):"string"==typeof t?path.resolve(o,t):t}function resolveConfigPaths(o,t){const n=resolveConfigEntry(o,"",t);return"include"in t&&Array.isArray(t.include)&&(n.include=t.include.map(t=>resolveConfigPathEntry(o,t))),n}function mergeConfigs(o,t){for(const[n,e]of Object.entries(o))n in t?Array.isArray(t[n])&&(Array.isArray(e)?t[n]=t[n].concat(e):t[n].push(e)):t[n]=o[n];return t}async function askForConfigFilePath(o){return null}async function askWhetherDatabaseIsValidToUse(o,t){return!0}async function loadConfigFile(o){return console.log("...Load config..."),await loadConfig(o)}async function requestConfigFile(o){return console.log("...Request config..."),await askForConfigFilePath()}async function loadDefaultConfig(o){return console.log("...Load default config..."),{inputs:[],outputs:[]}}function createDatabase(o){console.log("...Creating database...")}async function findInputEntries(o){return console.log("...Finding input entries..."),Array.isArray(o.inputs)?o.inputs:[]}async function loadInputEntry(o,t,n){console.log("...Loading input entry...")}async function verifyDatabaseWithClient(o,t){return console.log("...Verifying database with client..."),await askWhetherDatabaseIsValidToUse()}async function findDatabaseErrors(o,t){console.log("...Finding database errors...")}async function shouldContinueResolvingErrorsWithClient(o,t,n){console.log("...Should resolve database errors?")}async function resolveDatabaseErrors(o,t,n){console.log("...Resolving database errors...")}async function verifyErrorsWithClient(o,t,n){if(!n||n.length<=0)return!0}async function outputErrorLog(o,t,n){console.log("...Outputting database errors...")}function findOutputEntries(o){return console.log("...Finding output entries..."),Array.isArray(o.outputs)?o.outputs:[]}function processOutputEntry(o,t,n){console.log("...Process output entry...")}const DIRECTORY=".";async function main(o){try{const o=await resolveConfig(DIRECTORY);console.log(o);const t=await resolveDatabase(o);console.log(t),await validateDatabase(t,o),await generateOutput(t,o)}catch(o){return console.error("Program failed.",o),!1}return!0}async function resolveConfig(o){let t;console.log("Resolving config...");try{t=await loadConfigFile(o)}catch(o){let n;for(;n=await requestConfigFile();)try{if(t=await loadConfigFile(n))break}catch(o){console.error("Failed to load config.",o)}t||(t=await loadDefaultConfig())}if(!t)throw new Error("Could not resolve a config file for program. Stopping program...");return t}async function resolveDatabase(o){console.log("Resolving database...");const t=createDatabase(),n=await findInputEntries(o);for(const e of n)try{await loadInputEntry(t,o,e)}catch(o){console.error("Failed to load input entry.",o)}if(!await verifyDatabaseWithClient())throw new Error("Could not resolve database for program. Please update the config to match your specifications, then try again. Stopping program...");return t}async function validateDatabase(o,t){let n;for(console.log("Validating database...");(n=await findDatabaseErrors())&&await shouldContinueResolvingErrorsWithClient();)await resolveDatabaseErrors();if(!await verifyErrorsWithClient(o,t,n))throw await outputErrorLog(),new Error("Could not validate database. Stopping program...")}async function generateOutput(o,t){console.log("Generating output...");const n=findOutputEntries(t);for(const e of n)try{processOutputEntry(o,t,e)}catch(o){console.error("Failed to process output entry.",o)}}main(process.argv).then(o=>{o?console.log("Success!"):console.log("Failure!")});
