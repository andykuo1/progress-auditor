"use strict";const path=require("path"),fs=require("fs"),DEFAULT_CONFIG_FILE_NAME="config.json";async function loadConfig(e){let t,o;try{e=findValidConfigFilePath(e),o=path.dirname(e)}catch(e){return Promise.reject(e)}try{const o=fs.readFileSync(e);t=JSON.parse(o)}catch(e){return Promise.reject(["Failed to parse config file:","=>",e,"<="])}if("include"in(t=resolveConfigPaths(o,t))){const e=[],o=[];for(const r of t.include)try{const t=await loadConfig(r);o.push(t)}catch(t){e.push(t)}if(e.length>0)return Promise.reject(["Failed to resolve config includes:","=>",e,"<="]);const r=o.reduce((e,t)=>mergeConfigs(t,e),{});t=mergeConfigs(t,r)}return t}function findValidConfigFilePath(e){if(!fs.existsSync(e))throw new Error(`Cannot find non-existant path '${e}'.`);if(fs.lstatSync(e).isDirectory()){const t=e;if(e=path.resolve(t,DEFAULT_CONFIG_FILE_NAME),!fs.existsSync(e))throw new Error(`Cannot find config file in directory '${t}'.`)}return e}function resolveConfigEntry(e,t,o){if(t.toLowerCase().endsWith("path"))return resolveConfigPathEntry(e,o);if(Array.isArray(o)){let t=[];for(const r in o)t.push(resolveConfigEntry(e,r,o[r]));return t}if("object"==typeof o){let t={};for(const[r,n]of Object.entries(o))t[r]=resolveConfigEntry(e,r,n);return t}return o}function resolveConfigPathEntry(e,t){if(Array.isArray(t)){let o=[];for(const r of t)o.push(resolveConfigPathEntry(e,r));return o}return"object"==typeof t?resolveConfigPaths(e,t):"string"==typeof t?path.resolve(e,t):t}function resolveConfigPaths(e,t){const o=resolveConfigEntry(e,"",t);return"include"in t&&Array.isArray(t.include)&&(o.include=t.include.map(t=>resolveConfigPathEntry(e,t))),o}function mergeConfigs(e,t){for(const[o,r]of Object.entries(e))o in t?Array.isArray(t[o])&&(Array.isArray(r)?t[o]=t[o].concat(r):t[o].push(r)):t[o]=e[o];return t}async function loadConfigFile(e){return console.log("Load config..."),await loadConfig(e)}async function requestConfigFile(e){console.log("Request config...")}function getDefaultConfig(e){console.log("Load default config...")}function createDatabase(e){}function findDatabaseEntries(e){}function loadDatabaseEntry(e,t,o){}const DIRECTORY=".";async function main(e){try{const e=await resolveConfig(DIRECTORY);console.log("Config loaded:",e);const t=await resolveDatabase(e);await validateDatabase(t,e),await generateOutput(t,e)}catch(e){return console.error("Program failed.",e),!1}return!0}async function resolveConfig(e){let t;console.log("Resolving config...");try{t=await loadConfigFile(e)}catch(e){for(;configFilePath=await requestConfigFile();)try{if(t=await loadConfigFile(configFilePath))break}catch(e){console.error("Failed to load config.",e)}t||(t=getDefaultConfig())}if(!t)throw new Error("Could not resolve a config file for program. Stopping program...");return t}async function resolveDatabase(e){console.log("Resolving database...");const t=createDatabase(),o=findDatabaseEntries();for(const r of o)try{loadDatabaseEntry(t,e,r)}catch(e){console.error("Failed to load database entry.",e)}if(!DatabaseHelper.verifyDatabaseWithClient(t,e))throw new Error("Could not resolve database for program. Please update the config to match your specifications, then try again. Stopping program...");return t}async function validateDatabase(e,t){let o;for(console.log("Validating database...");(o=DatabaseHelper.findDatabaseErrors(e,t))&&DatabaseHelper.shouldContinueResolvingErrorsWithClient(e,t,o);)DatabaseHelper.resolveDatabaseErrors(e,t,o);if(!DatabaseHelper.verifyErrorsWithClient(e,t,o))throw DatabaseHelper.outputErrorLog(e,t,o),new Error("Could not validate database. Stopping program...")}async function generateOutput(e,t){console.log("Generating output...");const o=OutputHandler.findOutputEntries(t);for(const r of o)try{OutputHandler.processOutputEntry(e,t,r)}catch(e){console.error("Failed to process output entry.",e)}}main(process.argv);
