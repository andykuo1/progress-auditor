import * as UserDatabase from '../../database/UserDatabase.js';
import * as Client from '../../client/Client.js';

import * as Errors from '../helper/Errors.js';
import { createReviewer } from '../helper/Reviewer.js';
import { createBuilder } from '../helper/ReviewBuilder.js';
import * as MathHelper from '../../util/MathHelper.js';
import * as Review from '../../database/Review.js';
import chalk from 'chalk';

export const TYPE = 'add_owner_key';
export const DESCRIPTION = 'Add additional owner key for user.';

export async function review(db, config)
{
    try
    {
        await createReviewer()
            .type(TYPE)
            .paramLength(2)
            .forEach(value =>
            {
                const { id, type, params } = value;
                const user = UserDatabase.getUserByID(db, params[0]);
                if (!user)
                {
                    Errors.throwInvalidReviewParamUserIDError(db, value, params[0]);
                    return;
                }
            
                const ownerKey = params[1];
                if (user.ownerKey.includes(ownerKey))
                {
                    console.log("...Ignoring redundant review for owner key...");
                    return;
                }
            
                if (Array.isArray(user.ownerKey))
                {
                    user.ownerKey.push(ownerKey);
                }
                else
                {
                    user.ownerKey = [user.ownerKey, ownerKey];
                }
            })
            .review(db, config);
    }
    catch(e)
    {
        Client.error(e);
        throw e;
    }
}

export async function build(errors, db, config)
{
    if (errors.length > 1)
    {
        const userIDs = UserDatabase.getUsers(db);
        const choices = [];
        for(const userID of userIDs)
        {
            choices.push({
                message: userID + ': ' + chalk.gray(UserDatabase.getUserByID(db, userID).name),
                value: userID,
            });
        }
        choices.push('(custom)');
        const userID = await Client.askChoose('What is the expected user ID instead?', choices);
        if (userID === '(custom)')
        {
            userID = await Client.askPrompt('What is the custom user ID?', 'input');
        }

        const result = [];
        for(const error of errors)
        {
            const id = MathHelper.uuid();
            const date = new Date(Date.now());
            const params = [userID, error.context.ownerKey];
            result.push(Review.createReview(id, date, 'Generated by Progress Auditor', TYPE, params));
        }
        return result;
    }
    else
    {
        const result = [];
        for(const error of errors)
        {
            result.push(await buildStep(error));
        }
        return result;
    }
}

async function buildStep(error)
{
    return await createBuilder()
        .type(TYPE)
        .param(0, 'User ID', 'The target user id to add the owner for.')
        .param(1, 'Owner Key', 'The new owner key to add for the user.', error.context.ownerKey || '')
        .build();
}
