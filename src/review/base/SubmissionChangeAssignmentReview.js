import * as SubmissionDatabase from '../../database/SubmissionDatabase.js';
import * as Review from '../../database/Review.js';

import * as Errors from '../helper/Errors.js';
import { createReviewer } from '../helper/Reviewer.js';
import { createBuilder } from '../helper/ReviewBuilder.js';
import * as MathHelper from '../../util/MathHelper.js';
import * as Client from '../../client/Client.js';

export const TYPE = 'change_assignment';
export const DESCRIPTION = 'Change assignment for submission.';

export async function review(db, config)
{
    try
    {
        await createReviewer()
            .type(TYPE)
            .paramLength(2)
            .forEach(value =>
            {
                const { id, type, params } = value;
                const submission = SubmissionDatabase.getSubmissionByID(db, params[1]);
                if (!submission)
                {
                    Errors.throwInvalidReviewParamSubmissionIDError(db, value, params[1]);
                    return;
                }

                SubmissionDatabase.changeSubmissionAssignment(db, submission, params[0]);
            })
            .review(db, config);
    }
    catch(e)
    {
        Client.error(e);
        throw e;
    }
}

export async function build(errors, db, config)
{
    // Batch error processing...
    if (errors.length > 1)
    {
        const cache = db.getCache();
        const assignmentKeys = cache.assignmentKeys ? Array.from(cache.assignmentKeys) : [];
        let assignmentID = await Client.askChoose('What is the expected assignment ID instead?', [...assignmentKeys, '(custom)']);
        if (assignmentID === '(custom)')
        {
            assignmentID = await Client.askPrompt('What is the custom assignment ID?', 'input');
        }

        const result = [];
        for(const error of errors)
        {
            const id = MathHelper.uuid();
            const date = new Date(Date.now());
            const params = [assignmentID, error.context.submissionID];
            result.push(Review.createReview(id, date, 'Generated by Progress Auditor', TYPE, params));
        }
        return result;
    }
    // Single error processing...
    else
    {
        const result = [];
        for(const error of errors)
        {
            const review = await buildStep(error);
            prevAssignmentID = review.params[0];
            result.push(review);
        }
        return result;
    }
}

async function buildStep(error)
{
    return await createBuilder()
        .type(TYPE)
        .param(0, 'Assignment ID', 'The new assignment id to change to.')
        .param(1, 'Submission ID', 'The id for the target submission.', error.context.submissionID || '')
        .build();
}
